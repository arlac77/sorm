#!/usr/bin/env node

/* jslint node: true, esnext: true */

'use strict';

const commander = require('commander'),
  fs = require('fs'),
  os = require('os'),
  util = require('util'),
  path = require('path'),
  async = require('async'),
  pkginfo = require('pkginfo')(module, 'name', 'version'),
  sqlite3 = require('sqlite3'),
  winston = require('winston'),
  {
    Schema
  } = require('../dist/schema');


winston.cli();

commander
  .version(module.exports.version)
  .option('--database <file>', 'sqlite3 database file')
  .option('--schema <file>', 'schema definition file')
  .option('--ws', 'write schema from database into file')
  .option('--execddl', 'execute schema ddl create/migrate')
  .option('--verbose', 'be more verbose')
  .parse(process.argv);

if (commander.schema) {
  const s = Schema(commander.schema, error => {

    if (commander.database) {
      const db = new sqlite3.Database(commander.database);

      if (commander.execddl) {
        s.exec_ddl(db, {}, function (error) {
          if (error)
            winston.error('ddl error', error);
          else
            winston.info('ddl executed');
        });
        return;
      }

      s.load_ddl_from_db(db, error => {
        if (commander.verbose) console.info(JSON.stringify(s.versions, undefined, '\t'));

        if (commander.ws) {
          s.save(error => {
            if (error)
              winston.error('Schema save error', error);
            else
              winston.info('Schema saved', s.basedir);
          });
        }
      });
    }
  });
}
